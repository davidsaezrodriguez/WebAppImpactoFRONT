import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Inject } from "@angular/core";
import { JwtHelperService } from "./jwthelper.service";
import { JWT_OPTIONS } from "./jwtoptions.token";
import { mergeMap } from "rxjs/operators";
import { parse } from "url";
import { from } from "rxjs";
import * as ɵngcc0 from '@angular/core';
let JwtInterceptor = class JwtInterceptor {
    constructor(config, jwtHelper) {
        this.jwtHelper = jwtHelper;
        this.standardPorts = ["80", "443"];
        this.tokenGetter = config.tokenGetter;
        this.headerName = config.headerName || "Authorization";
        this.authScheme =
            config.authScheme || config.authScheme === ""
                ? config.authScheme
                : "Bearer ";
        this.whitelistedDomains = config.whitelistedDomains || [];
        this.blacklistedRoutes = config.blacklistedRoutes || [];
        this.throwNoTokenError = config.throwNoTokenError || false;
        this.skipWhenExpired = config.skipWhenExpired;
    }
    isWhitelistedDomain(request) {
        const requestUrl = parse(request.url, false, true);
        const hostName = requestUrl.hostname !== null
            ? `${requestUrl.hostname}${requestUrl.port && !this.standardPorts.includes(requestUrl.port)
                ? ":" + requestUrl.port
                : ""}`
            : requestUrl.hostname;
        return (hostName === null ||
            this.whitelistedDomains.findIndex((domain) => typeof domain === "string"
                ? domain === hostName
                : domain instanceof RegExp
                    ? domain.test(hostName)
                    : false) > -1);
    }
    isBlacklistedRoute(request) {
        const requestedUrl = parse(request.url, false, true);
        return (this.blacklistedRoutes.findIndex((route) => {
            if (typeof route === "string") {
                const parsedRoute = parse(route, false, true);
                return (parsedRoute.hostname === requestedUrl.hostname &&
                    parsedRoute.path === requestedUrl.path);
            }
            if (route instanceof RegExp) {
                return route.test(request.url);
            }
            return false;
        }) > -1);
    }
    handleInterception(token, request, next) {
        let tokenIsExpired = false;
        if (!token && this.throwNoTokenError) {
            throw new Error("Could not get token from tokenGetter function.");
        }
        if (this.skipWhenExpired) {
            tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;
        }
        if (token && tokenIsExpired && this.skipWhenExpired) {
            request = request.clone();
        }
        else if (token) {
            request = request.clone({
                setHeaders: {
                    [this.headerName]: `${this.authScheme}${token}`,
                },
            });
        }
        return next.handle(request);
    }
    intercept(request, next) {
        if (!this.isWhitelistedDomain(request) ||
            this.isBlacklistedRoute(request)) {
            return next.handle(request);
        }
        const token = this.tokenGetter(request);
        if (token instanceof Promise) {
            return from(token).pipe(mergeMap((asyncToken) => {
                return this.handleInterception(asyncToken, request, next);
            }));
        }
        else {
            return this.handleInterception(token, request, next);
        }
    }
};
JwtInterceptor.ɵfac = function JwtInterceptor_Factory(t) { return new (t || JwtInterceptor)(ɵngcc0.ɵɵinject(JWT_OPTIONS), ɵngcc0.ɵɵinject(JwtHelperService)); };
JwtInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JwtInterceptor, factory: JwtInterceptor.ɵfac });
JwtInterceptor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [JWT_OPTIONS,] }] },
    { type: JwtHelperService }
];
JwtInterceptor = __decorate([ __param(0, Inject(JWT_OPTIONS)),
    __metadata("design:paramtypes", [Object, JwtHelperService])
], JwtInterceptor);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(JwtInterceptor, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [JWT_OPTIONS]
            }] }, { type: JwtHelperService }]; }, null); })();
export { JwtInterceptor };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,